class OptionItem{constructor(t){this.optionId=t.optionid,this.value=t.value,this.title=t.title,this.voteCnt=0,this.isHighest=!1,this.isOwnVote=!1,this.highlight=!1}}class OptionCtrl{constructor(t,i){this.optionList=new Map,this.correctOption=i,this.votingClosed=!1,this.highlightVote=!1,this.chartCtrl=null;for(const o in t)this.addOptionItem(o,t[o])}addOptionItem(t,i){this.optionList.set(t,new OptionItem(i)),this.optionList=new Map(this.optionList)}doHiglightAnswer(o){this.highlightVote=o,this.optionList.forEach((t,i)=>{t.highlight=o&&i===this.correctOption})}updateVotes(t,o){this.clearAllVotes(),t.forEach(t=>{const i=this.optionList.get(t.val().option);i.voteCnt++,t.key===o&&this.updateOwnVoteInfo(i)}),this.updateHighestVotedOptions(),this.chartCtrl&&this.chartCtrl.performUpdate(this.optionList)}updateOwnVoteInfo(t){for(var[i,o]of this.optionList.entries())o.isOwnVote=!1;t.isOwnVote=!0}clearAllVotes(){this.optionList.forEach(t=>{t.voteCnt=0})}updateHighestVotedOptions(){var t,i,o=-1/0,s=[];for([t,i]of this.optionList.entries())i.isHighest=!1,0<i.voteCnt&&(i.voteCnt>o?(o=i.voteCnt,(s=[]).push(i)):i.voteCnt===o&&s.push(i));s.forEach(t=>{t.isHighest=!0})}}
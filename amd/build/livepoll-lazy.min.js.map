{"version":3,"file":"livepoll-lazy.min.js","sources":["../src/livepoll-lazy.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Live poll main module.\n *\n * @copyright Copyright (c) 2018 Open LMS\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\"jquery\", \"core/log\", \"core/templates\"],\n    function($, Log, templates) {\n\n        var self = this;\n\n        /**\n         * Resets the vote count for each option to 0.\n         */\n        var resetVotes = function() {\n            self.votes = [];\n            $.each(self.options, function(optionid) {\n                self.votes[optionid] = 0;\n            });\n        };\n\n        /**\n         * Adds the click listener to each vote btn so the vote firebase db is updated.\n         */\n        var addClickListeners = function() {\n            if (self.listeningToClicks) {\n                return;\n            }\n            $(\".livepoll-votebtn\").on(\"click\", function(){\n                var option = $(this).data(\"option\");\n                var vote = {\n                    option: option\n                };\n                var voteRef = self.database.ref(\"polls/\" + self.pollKey + \"/votes/\" + self.userKey);\n                voteRef.once(\"value\").then(function(voteSnapshot) {\n                    if (voteSnapshot.val() && voteSnapshot.val().option === vote.option) {\n                        voteRef.remove();\n                    } else {\n                        voteRef.set(vote);\n                    }\n                });\n            });\n\n            self.listeningToClicks = true;\n        };\n\n        var addControlListeners = function() {\n            $(\"#livepoll_closevoting\").on(\"change\", function() {\n                var closeVoting = this.checked;\n                var controlRef = self.database.ref(\"polls/\" + self.pollKey + \"/controls/closeVoting\");\n                controlRef.set(closeVoting);\n            });\n\n            $(\"#livepoll_highlightanswer\").on(\"change\", function() {\n                var higlightAnswer = this.checked;\n                var controlRef = self.database.ref(\"polls/\" + self.pollKey + \"/controls/higlightAnswer\");\n                controlRef.set(higlightAnswer);\n            });\n\n            // Enable voting as default behaviour.\n            if (!self.closeVoting) {\n                $(\".livepoll-votebtn\").removeClass(\"disabled\");\n                addClickListeners();\n            }\n        };\n\n        var removeClickListeners = function() {\n            if (!self.listeningToClicks) {\n                return;\n            }\n\n            $(\".livepoll-votebtn\").off(\"click\");\n            self.listeningToClicks = false;\n        };\n\n        /**\n         * Updates the vote UI.\n         * Chart and text vote count.\n         */\n        var updateVoteUI = function() {\n            var promises = [];\n            $.each(self.resultHandlers, function(i, handler) {\n                var promise = handler.update(self.options, self.votes);\n                promises.push(promise);\n            });\n            $.when.apply($, promises).done(function() {\n                Log.debug(\"livepoll UI has been updated.\");\n            });\n        };\n\n        /**\n         * Updates the voute count and vote UI for a poll snapshot.\n         */\n        var updateVoteCount = function() {\n            var votesRef = self.database.ref(\"polls/\" + self.pollKey + \"/votes\");\n            votesRef.once(\"value\").then(function(votesSnapshot) {\n                var votes = votesSnapshot.val();\n                resetVotes();\n                $(\".livepoll-votebtn\").addClass(\"btn-primary\").removeClass(\"btn-success\");\n                $.each(votes, function( userKey, vote ) {\n                    self.votes[vote.option]++;\n                    if (userKey === self.userKey) {\n                        $(\".livepoll-votebtn[data-option=\\\"\" + vote.option + \"\\\"]\")\n                            .addClass(\"btn-success\").removeClass(\"btn-primary\");\n                    }\n                });\n                updateVoteUI();\n            });\n        };\n\n        /**\n         * Upadtes control input state.\n         */\n        var updateControls = function() {\n            var controlsRef = self.database.ref(\"polls/\" + self.pollKey + \"/controls\");\n\n            controlsRef.once(\"value\").then(function(controlsSnapshot) {\n                var controlStatus = controlsSnapshot.val();\n\n                self.closeVoting = !!controlStatus.closeVoting;\n                self.higlightAnswer = !!controlStatus.higlightAnswer;\n\n                $(\"#livepoll_closevoting\").prop('checked', self.closeVoting);\n                $(\"#livepoll_highlightanswer\").prop('checked', self.higlightAnswer);\n\n                $(\".livepoll-votebtn\").toggleClass(\"disabled\", self.closeVoting);\n\n\n                if (self.closeVoting) {\n                    removeClickListeners();\n                    var tmpltName = \"mod_livepoll/voting_closed\";\n                    if ($(\".livepoll-closed-voting-msg > .alert\").length === 0) {\n                        templates.render(tmpltName, {}).then(function(html, js) {\n                            templates.appendNodeContents(\".livepoll-closed-voting-msg\", html, js);\n                            $(\".livepoll-closed-voting-msg > .alert\")\n                                .alert().removeClass(\"hide\").addClass(\"show\");\n                        });\n                    }\n                } else {\n                    addClickListeners();\n                    if ($(\".livepoll-closed-voting-msg > .alert\").length > 0) {\n                        $(\".livepoll-closed-voting-msg > .alert\")\n                            .alert(\"close\");\n                    }\n                }\n\n                $(\".livepoll-votebtn\").removeClass(\"livepoll-answer-animation\");\n                $(\".mod-livepoll-text-result\").removeClass(\"livepoll-answer-animation\");\n                if (self.higlightAnswer) {\n                    $(\".livepoll-votebtn[data-option=\\\"\" + self.correctOption + \"\\\"]\")\n                        .addClass(\"livepoll-answer-animation\");\n                    $(\".mod-livepoll-text-result:has(#vote-count-\" + self.correctOption + \")\")\n                        .addClass(\"livepoll-answer-animation\");\n                }\n            });\n        };\n\n        /**\n         * Adds listeners for state changes in the poll.\n         */\n        var addDBListeners = function() {\n            var votesRef = self.database.ref(\"polls/\" + self.pollKey + \"/votes\");\n            votesRef.on(\"child_added\", updateVoteCount);\n            votesRef.on(\"child_changed\", updateVoteCount);\n            votesRef.on(\"child_removed\", updateVoteCount);\n\n            var controlsRef = self.database.ref(\"polls/\" + self.pollKey + \"/controls\");\n            controlsRef.on(\"child_added\", updateControls);\n            controlsRef.on(\"child_changed\", updateControls);\n            controlsRef.on(\"child_removed\", updateControls);\n\n            updateVoteUI();\n        };\n\n        /**\n         *\n         * @returns {*|jQuery}\n         */\n        var initVoteUI = function() {\n            var dfd = $.Deferred(), subPromises = [];\n            self.resultHandlers = [];\n            var textDecorators = [\"green\", \"bold\", \"shadowy\"];\n            $.each(self.resultsToRender, function(i, rType) {\n                var reqDfd = $.Deferred();\n                require(\n                    [\n                        \"mod_livepoll/\" + rType + \"-result-lazy\"\n                    ], function(Handler) {\n                        if (rType === \"text\") {\n                            var currentTxtResult = new Handler(), txtPromises = [];\n\n                            $.each(textDecorators, function(i, decoratorId) {\n                                var txtDfd = $.Deferred();\n                                txtPromises.push(txtDfd.promise());\n                                require(\n                                    [\n                                        \"mod_livepoll/\" + decoratorId + \"-text-result-lazy\"\n                                    ], function(TextDecorator) {\n                                        currentTxtResult = new TextDecorator(currentTxtResult);\n                                        txtDfd.resolve();\n                                    }\n                                );\n                            });\n\n                            $.when.apply($, txtPromises).done(function() {\n                                self.resultHandlers.push(currentTxtResult);\n                                reqDfd.resolve();\n                            });\n                        } else {\n                            self.resultHandlers.push(new Handler());\n                            reqDfd.resolve();\n                        }\n                    }\n                );\n                subPromises.push(reqDfd.promise());\n            });\n\n            $.when.apply($, subPromises).done(function() {\n                dfd.resolve();\n            });\n\n            return dfd.promise();\n        };\n\n        /**\n         * Initializes firebase library.\n         */\n        var initFirebase = function() {\n            // Set the configuration for your app.\n            var config = {\n                apiKey: self.apiKey,\n                authDomain: self.authDomain,\n                databaseURL: self.databaseURL,\n                projectId: self.projectID,\n            };\n\n            self.firebase.initializeApp(config);\n\n            // Get a reference to the database service.\n            self.database = self.firebase.database();\n            self.auth = self.firebase.auth();\n            self.auth.signInAnonymously().catch(function(error) {\n                // Handle Errors here.\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                Log.error(\"Could not authenticate into firebase using anonymous setup.\");\n                Log.error(errorCode);\n                Log.error(errorMessage);\n            });\n            self.auth.onAuthStateChanged(function(user) {\n                if (user) {\n                    Log.debug(\"User has signed in to firebase.\");\n                    self.fbuser = user;\n                    initVoteUI().done(function() {\n                        addDBListeners();\n                        addControlListeners();\n                    });\n                } else {\n                    Log.debug(\"User has signed out from firebase.\");\n                }\n            });\n        };\n\n        /**\n         * Module initialization function.\n         *\n         * @param {string} apiKey\n         * @param {string} authDomain\n         * @param {string} databaseURL\n         * @param {string} projectID\n         * @param {string} pollKey\n         * @param {string} userKey\n         * @param {array} options\n         * @param {string} correctOption\n         * @param {array} resultsToRender\n         */\n        var init = function(apiKey, authDomain, databaseURL, projectID, pollKey, userKey, options, correctOption, resultsToRender) {\n            self.apiKey = apiKey;\n            self.authDomain = authDomain;\n            self.databaseURL = databaseURL;\n            self.projectID = projectID;\n            self.options = options;\n            self.correctOption = correctOption;\n            self.pollKey = pollKey;\n            self.userKey = userKey;\n            self.resultsToRender = resultsToRender;\n            self.closeVoting = false;\n            self.higlightAnswer = false;\n            self.listeningToClicks = false;\n\n            resetVotes();\n\n            $(document).ready(function() {\n                /* global firebase */\n                if (undefined === firebase) {\n                    Log.error(\"Firebase not found. Live poll will not work.\");\n                    return;\n                }\n                self.firebase = firebase;\n                initFirebase();\n            });\n        };\n\n        return {\n            \"init\": init\n        };\n    });\n"],"names":["define","$","Log","templates","self","this","resetVotes","votes","each","options","optionid","addClickListeners","listeningToClicks","on","vote","option","data","voteRef","database","ref","pollKey","userKey","once","then","voteSnapshot","val","remove","set","updateVoteUI","promises","resultHandlers","i","handler","promise","update","push","when","apply","done","debug","updateVoteCount","votesSnapshot","addClass","removeClass","updateControls","controlsSnapshot","controlStatus","closeVoting","higlightAnswer","prop","toggleClass","off","length","render","html","js","appendNodeContents","alert","correctOption","initFirebase","config","apiKey","authDomain","databaseURL","projectId","projectID","firebase","initializeApp","auth","signInAnonymously","catch","error","errorCode","code","errorMessage","message","onAuthStateChanged","user","fbuser","dfd","Deferred","subPromises","textDecorators","resultsToRender","rType","reqDfd","require","Handler","currentTxtResult","txtPromises","decoratorId","txtDfd","TextDecorator","resolve","initVoteUI","votesRef","controlsRef","addDBListeners","checked","document","ready","undefined"],"mappings":"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"}